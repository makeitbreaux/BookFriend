{"version":3,"sources":["hooks/useLocalStorage.js","auth/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","common/Alert.js","auth/LoginForm.js","api/api.js","profiles/ProfileForm.js","auth/SignupForm.js","routes-nav/PrivateRoute.js","routes-nav/AuthorCard.js","routes-nav/AuthorSearchForm.js","routes-nav/WorkCard.js","routes-nav/WorkSearchForm.js","routes-nav/Routes.js","common/LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","logout","currentUser","useContext","className","src","width","height","alt","to","onClick","first_name","username","Homepage","firstName","Alert","type","messages","role","map","error","LoginForm","login","history","useHistory","password","formData","setFormData","formErrors","setFormErrors","handleSubmit","evt","a","preventDefault","result","success","push","errors","handleChange","target","name","value","l","onSubmit","onChange","autoComplete","required","length","BASE_URL","process","REACT_APP_BASE_URL","BookFriendApi","endpoint","data","method","url","headers","Authorization","token","params","axios","response","message","Array","isArray","this","request","res","user","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","profileData","JoblyApi","saveProfile","updatedUser","f","SignupForm","signup","PrivateRoute","exact","path","children","AuthorCard","authorName","birthDate","topWork","topSubjects","AuthorSearchForm","last_name","inputs","setInputs","setAuthorName","setBirthDate","setTopWork","setTopSubjects","showResults","setShowResults","Results","id","e","onSubmitForm","fetch","json","parseRes","docs","birth_date","top_work","top_subjects","placeholder","WorkCard","works","work","toString","title","WorkSearchForm","setWorks","setName","authorKey","setAuthorKey","firstRequest","firstResponse","log","secondRequest","secondResponse","entries","Routes","register","LoadingSpinner","App","infoLoaded","setInfoLoaded","setToken","signupData","loginData","jwt","decode","getCurrentUser","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a3b15793.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;","import React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\nimport \"./Navigation.css\";\n\n/** Navigation bar for site. Shows up on every page.\n *\n * When user is logged in, shows links to main areas of site. When not,\n * shows link to Login and Signup forms.\n *\n * Rendered by App.\n */\n\nfunction Navigation({ logout }) {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  function loggedInNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/authors\">\n              Authors\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/works\">\n              Works\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/profile\">\n              Profile\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\n              Log out {currentUser.first_name || currentUser.username}\n            </Link>\n          </li>\n        </ul>\n    );\n  }\n\n  function loggedOutNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/login\">\n              Login\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/signup\">\n              Sign Up\n            </NavLink>\n          </li>\n        </ul>\n    );\n  }\n\n  return (\n      <nav className=\"Navigation navbar navbar-dark bg-dark navbar-expand-md\">\n        <img src=\"bookfriendimg.png\" width=\"100\" height=\"100\" className=\"d-inline-block align-top\" alt=\"\"></img>\n        <Link className=\"navbar-brand\" to=\"/\">\n          BookFriend\n        </Link>\n        {currentUser ? loggedInNav() : loggedOutNav()}\n      </nav>\n  );\n}\n\nexport default Navigation;\n","import React, { useContext} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Homepage.css\";\nimport UserContext from \"../auth/UserContext\";\n\n/** Homepage of site.\n *\n * Shows welcome message or login/register buttons.\n *\n * Routed at /\n *\n * Routes -> Homepage\n */\n\nfunction Homepage() {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\n\n//   const getPage = async () => {\n//     try {\n//       const res = await fetch(\"https://book-friend.herokuapp.com/\", {\n//         method: \"GET\"\n//       });\n\n//       const parseData = await res.json();\n//       return res.send(parseData)\n\n//     } catch (err) {\n//       console.error(err.message);\n//     }\n//   };\n//   useEffect(() => {\n//     getPage();\n// }, []);  \n\n  return (\n      <div className=\"Homepage\">\n        <div className=\"container text-center\">\n          <h1 className=\"mb-4 font-weight-bold\">BookFriend</h1>\n          <img className=\"mx-auto h-30 p-0 m-0 pt-0\" src=\"./bookfriendimg1.png\" alt=\"BookFriend\" />\n          <p className=\"lead\">Search for your favorite authors and books information.</p>\n          {currentUser\n              ? <h2>\n                Welcome Back, {currentUser.firstName || currentUser.username}! <div>\n                <Link className=\"btn btn-info mr-4 mt-4 mb-4\" to=\"/authors\">Authors </Link>\n                <Link className=\"btn btn-info mr-4 mt-4 mb-4\" to=\"/works\"> Works</Link>\n                </div>\n              </h2>\n\n              : (\n                  <p>\n\n                    <Link className=\"btn btn-primary font-weight-bold mr-3\"\n                          to=\"/login\">\n                      Log in\n                    </Link>\n                    <Link className=\"btn btn-primary font-weight-bold\"\n                          to=\"/signup\">\n                      Sign up\n                    </Link>\n                  </p>\n              )}\n\n        </div>\n      </div>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\n\n/** Presentational component for showing bootstrap-style alerts.\n *\n * { LoginForm, SignupForm, ProfileForm } -> Alert\n **/\n\nfunction Alert({ type = \"danger\", messages = [] }) {\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\n\n  return (\n      <div className={`alert alert-${type}`} role=\"alert\">\n        {messages.map(error => (\n            <p className=\"mb-0 small\" key={error}>\n              {error}\n            </p>\n        ))}\n      </div>\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Login form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls login function prop\n * - redirects to /dashboard\n *\n * Routes -> LoginForm -> Alert\n * Routed as /login\n */\n\nfunction LoginForm({ login }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"LoginForm\",\n      \"login=\", typeof login,\n      \"formData=\", formData,\n      \"formErrors\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/homepage\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(l => ({ ...l, [name]: value }));\n  }\n\n  return (\n      <div className=\"LoginForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h3 className=\"mb-3\">Log In</h3>\n\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                      autoComplete=\"username\"\n                      required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                      autoComplete=\"current-password\"\n                      required\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n\n                <button\n                    className=\"btn btn-primary float-right\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default LoginForm;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"https://book-friend.herokuapp.com\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass BookFriendApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${BookFriendApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get the homepage. */\n\n  // static async getHomepage() {\n  //   let res = await this.request(`https://book-friend.herokuapp.com/`);\n  //   return res.json();\n  // }\n\n  /** Get the current user. */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get token for login from username, password. */\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Signup for site. */\n\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** Save user profile page. */\n\n  static async saveProfile(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n}\n\n\nexport default BookFriendApi;\n","import React, { useState, useContext } from \"react\";\nimport Alert from \"../common/Alert\";\nimport JoblyApi from \"../api/api\";\nimport UserContext from \"../auth/UserContext\";\n\n// eslint-disable-next-line\nimport useTimedMessage from \"../hooks/useTimedMessage\";\n\n/** Profile editing form.\n *\n * Displays profile form and handles changes to local form state.\n * Submitting the form calls the API to save, and triggers user reloading\n * throughout the site.\n *\n * Confirmation of a successful save is normally a simple <Alert>, but\n * you can opt-in to our fancy limited-time-display message hook,\n * `useTimedMessage`, but switching the lines below.\n *\n * Routed as /profile\n * Routes -> ProfileForm -> Alert\n */\n\nfunction ProfileForm() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formData, setFormData] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  // switch to use our fancy limited-time-display message hook\n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n  // const [saveConfirmed, setSaveConfirmed] = useTimedMessage()\n\n  console.debug(\n      \"ProfileForm\",\n      \"currentUser=\", currentUser,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n      \"saveConfirmed=\", saveConfirmed,\n  );\n\n  /** on form submit:\n   * - attempt save to backend & report any errors\n   * - if successful\n   *   - clear previous error messages and password\n   *   - show save-confirmed message\n   *   - set current user info throughout the site\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n\n    let profileData = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      password: formData.password,\n    };\n\n    let username = formData.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormData(f => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    // trigger reloading of user information throughout the site\n    setCurrentUser(updatedUser);\n  }\n\n  /** Handle form data changing */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(f => ({\n      ...f,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  }\n\n  return (\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h3>Profile</h3>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <p className=\"form-control-plaintext\">{formData.username}</p>\n              </div>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input\n                    name=\"firstName\"\n                    className=\"form-control\"\n                    value={formData.firstName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last Name</label>\n                <input\n                    name=\"lastName\"\n                    className=\"form-control\"\n                    value={formData.lastName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    name=\"email\"\n                    className=\"form-control\"\n                    value={formData.email}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Confirm password to make changes:</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control\"\n                    value={formData.password}\n                    onChange={handleChange}\n                />\n              </div>\n\n              {formErrors.length\n                  ? <Alert type=\"danger\" messages={formErrors} />\n                  : null}\n\n              {saveConfirmed\n                  ?\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                  : null}\n\n              <button\n                  className=\"btn btn-primary btn-block mt-4\"\n                  onClick={handleSubmit}\n              >\n                Save Changes\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default ProfileForm;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../common/Alert\";\n\n/** Signup form.\n *\n * Shows form and manages update to state on changes.\n * On submission:\n * - calls signup function prop\n * - redirects to /dashboard route\n *\n * Routes -> SignupForm -> Alert\n * Routed as /signup\n */\n\nfunction SignupForm({ signup }) {\n  const history = useHistory();\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"SignupForm\",\n      \"signup=\", typeof signup,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await signup(formData);\n    if (result.success) {\n      history.push(\"/homepage\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(data => ({ ...data, [name]: value }));\n  }\n\n  return (\n      <div className=\"SignupForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h2 className=\"mb-3\">Sign Up</h2>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control\"\n                      value={formData.username}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control\"\n                      value={formData.password}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label>First name</label>\n                  <input\n                      name=\"firstName\"\n                      className=\"form-control\"\n                      value={formData.firstName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last name</label>\n                  <input\n                      name=\"lastName\"\n                      className=\"form-control\"\n                      value={formData.lastName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control\"\n                      value={formData.email}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null\n                }\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-primary float-right\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default SignupForm;","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../auth/UserContext\";\n\n/** \"Higher-Order Component\" for private routes.\n *\n * In routing component, use these instead of <Route ...>. This component\n * will check if there is a valid current user and only continues to the\n * route if so. If no user is present, redirects to login form.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n      \"PrivateRoute\",\n      \"exact=\", exact,\n      \"path=\", path,\n      \"currentUser=\", currentUser,\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n      <Route exact={exact} path={path}>\n        {children}\n      </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nfunction AuthorCard({authorName, birthDate, topWork, topSubjects}) {\n\nAuthorCard.propTypes = {\n  authorName: PropTypes.string,\n  birthDate: PropTypes.string,\n  topWork: PropTypes.string,\n  topSubjects: PropTypes.array\n}\n\nreturn (\n  <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n    <div className=\"px-4 py-5 sm:px-6\">\n      <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Author Information</h3>\n    </div>\n      \n    <div className=\"border-t border-gray-200\">\n      <dl>\n        <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n          <dt className=\"text-sm font-medium text-gray-500\">Author Name</dt>\n          <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{authorName}</dd>\n        </div>\n          \n        <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n          <dt className=\"text-sm font-medium text-gray-500\">Date of Birth</dt>\n          <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{birthDate}</dd>\n        </div>\n          \n        <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n          <dt className=\"text-sm font-medium text-gray-500\">Top Work</dt>\n          <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{topWork}</dd>\n        </div>\n        \n        <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n          <dt className=\"text-sm font-medium text-gray-500\">Top Subjects</dt>\n          <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{topSubjects}</dd>\n        </div>\n        </dl>\n      </div>\n    </div>\n  );\n}\n\nexport default AuthorCard;\n","import React, {useState} from \"react\";\nimport AuthorCard from \"./AuthorCard\";\n\n\nconst AuthorSearchForm = () => {\n    // * creating state for needed info\n    const [inputs, setInputs] = useState({\n        first_name: \"\",\n        last_name: \"\"\n    });\n    const [authorName, setAuthorName] = useState(\"\");\n    const [birthDate, setBirthDate] = useState(\"\");\n    const [topWork, setTopWork] = useState(\"\");\n    const [topSubjects, setTopSubjects] = useState(\"\");\n    const [showResults, setShowResults] = React.useState(false)\n    // * setting state with first_name, last_name inputs from form\n    const {first_name, last_name} = inputs;\n\n    // * functionality to hide/show API results\n    const onClick = () => setShowResults(true)\n\n    const Results = () => (\n        <div id=\"results\" className=\"search-results\">\n            <AuthorCard \n                authorName={authorName} \n                birthDate={birthDate} \n                topWork={topWork} \n                topSubjects={topSubjects} \n            />\n        </div>\n      )\n\n    // * handle change & submit functionality\n    const onChange = (e) => {\n        setInputs({...inputs, [e.target.name] : e.target.value})\n    }\n    \n    const onSubmitForm = async (e) => {\n        e.preventDefault();\n        try {\n            // * call API with info input into form\n            let {first_name, last_name} = inputs;\n            // eslint-disable-next-line\n            const response = await fetch(`https://openlibrary.org/search/authors.json?q=` + `${first_name}` + `%20` + `${last_name}`, {\n                method: \"GET\"\n            })\n\n            const parseRes = await response.json()\n            // * setting states with info fetched from API\n            // setAuthorKey(parseRes.docs[0].key)\n            setAuthorName(parseRes.docs[0].name)\n            setBirthDate(parseRes.docs[0].birth_date)\n            setTopWork(parseRes.docs[0].top_work)\n            setTopSubjects(parseRes.docs[0].top_subjects)\n        } catch (err) {\n              console.error(err);\n            }\n          };\n\nreturn (\n    <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h1 className=\"text-center text-lg leading-6 font-medium px-4 py-5 \">Search for Author Information</h1>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form onSubmit={onSubmitForm}>\n            <div className=\"form-group\">\n                <label>First Name</label>\n                <input \n                    type=\"text\" \n                    name=\"first_name\" \n                    placeholder=\"First Name\" \n                    value={first_name}\n                    onChange={e => onChange(e)}\n                    className=\"form-control\"\n                    />\n                </div>\n                <div className=\"form-group\">\n                <label>Last Name</label>\n                <input \n                    type=\"text\" \n                    name=\"last_name\" \n                    placeholder=\"Last Name\" \n                    value={last_name}\n                    onChange={e => onChange(e)}\n                    className=\"form-control\"\n                    />\n                </div>\n                        \n            <div className=\"d-grid gap-2\">\n                <button type=\"submit\" onClick={onClick} className=\"btn btn-info btn-block mt-4\"> Search for Author Information </button>\n                    { showResults ? <Results /> : null }\n            </div>\n        </form>\n    </div>\n    </div>\n    </div>\n    )\n}\n\nexport default AuthorSearchForm;\n\n\n  \n\n  ","import React from \"react\";\nimport PropTypes from 'prop-types';\nfunction WorkCard({name, works}) {\n\n  WorkCard.propTypes = {\n    name: PropTypes.string,\n    works: PropTypes.array\n  }\n\nreturn (\n  <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n    <div className=\"px-4 py-5 sm:px-6\">\n      <h3 className=\"text-lg leading-6 font-medium text-gray-900\">Work Information</h3>\n    </div>\n      \n    <div className=\"border-t border-gray-200\">\n      <dl>\n        <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n          <dt className=\"text-sm font-medium text-gray-500\">Author Name</dt>\n          <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{name}</dd>\n        </div>\n          \n        <div className=\"bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n          <dt className=\"text-sm font-medium text-gray-500\">Works</dt>\n            {works.map(work => {\n              return (\n                <div key={work}>\n                  <ul className=\"list-disc\">\n                    <li key={work.toString()}>\n                      <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{work.title}</dd>\n                    </li>\n                  </ul>\n                </div>\n                  )\n              })}\n          </div>\n        </dl>\n      </div>\n    </div>\n  )\n}\n  \nexport default WorkCard;","import React, {useState} from \"react\";\nimport WorkCard from \"./WorkCard\";\n\nconst WorkSearchForm = () => {\n    // * creating state for needed info\n    const [inputs, setInputs] = useState({\n        first_name: \"\",\n        last_name: \"\"\n    });\n    const [works, setWorks] = useState([])\n    const [name, setName] = useState(\"\")\n    const [authorKey, setAuthorKey] = useState(\"\")\n    const [showResults, setShowResults] = React.useState(false)\n    // * setting state with title input from form \n    const {first_name, last_name} = inputs;\n\n    // * functionality to hide/show API results\n    const onClick = () => setShowResults(true)\n\n    const Results = () => (\n        <div id=\"results\" className=\"search-results\">\n          <WorkCard works={works} name={name}/>\n        </div>\n      )\n\n    // * handle change & submit functionality\n    const handleChange = (e) => {\n        setInputs({...inputs, [e.target.name] : e.target.value})\n    }\n    \n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            // * call API with info input into form\n            let {first_name, last_name} = inputs;\n            // eslint-disable-next-line\n            const firstRequest = await fetch(`https://openlibrary.org/search/authors.json?q=` + `${first_name}` + `%20` + `${last_name}`, {\n                method: \"GET\"\n        })\n            const firstResponse = await firstRequest.json()\n            // * setting states with info fetched from API\n            const key = firstResponse.docs[0].key\n            const name = firstResponse.docs[0].name\n            setAuthorKey(key)\n            setName(name)\n            console.log(authorKey)\n            // * call author API with authorKey from form search\n            const secondRequest = await fetch(`http://openlibrary.org/authors/${key}/works.json?language=eng`, {\n                        method: \"GET\"\n            })\n            const secondResponse = await secondRequest.json()\n            const works = secondResponse.entries\n            \n            setWorks(works)\n            console.log(secondResponse)\n    \n        } catch (err) {\n            console.error(err)\n            }\n          };\n    \nreturn (\n    <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h1 className=\"text-center text-lg leading-6 px-4 py-5 font-medium \">Search for All Works by an Author </h1>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label>First Name</label>\n                <input \n                    type=\"text\" \n                    name=\"first_name\" \n                    id=\"first_name\"\n                    placeholder=\"First Name\" \n                    value={first_name}\n                    onChange={e => handleChange(e)}\n                    className=\"form-control\" \n                    />\n                    </div>\n\n                <div className=\"form-group\">\n                <label>Last Name</label>\n                <input \n                    type=\"text\" \n                    name=\"last_name\" \n                    id=\"last_name\"\n                    placeholder=\"Last Name\" \n                    value={last_name}\n                    onChange={e => handleChange(e)}\n                    className=\"form-control\" \n                    />\n                </div>\n                    \n            <div className=\"d-grid gap-2\">\n                <button type=\"submit\" onClick={onClick} className=\"btn btn-info btn-block mt-4\"> Search for Works of Author </button>\n                { showResults ? <Results /> : null }\n            </div>\n        </form>\n</div>\n</div>\n</div>\n    )\n}\n\nexport default WorkSearchForm;","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\nimport LoginForm from \"../auth/LoginForm\";\nimport ProfileForm from \"../profiles/ProfileForm\";\nimport SignupForm from \"../auth/SignupForm\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport AuthorSearchForm from \"./AuthorSearchForm\";\nimport WorkSearchForm from \"./WorkSearchForm\";\n\n/** Site-wide routes.\n *\n * Parts of site should only be visitable when logged in. Those routes are\n * wrapped by <PrivateRoute>, which is an authorization component.\n *\n * Visiting a non-existant route redirects to the homepage.\n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\n      \"Routes\",\n      `login=${typeof login}`,\n      `register=${typeof register}`,\n  );\n\n  return (\n      <div className=\"pt-5\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <LoginForm login={login} />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupForm signup={signup} />\n          </Route>\n\n          <PrivateRoute exact path=\"/authors\">\n            <AuthorSearchForm />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/works\">\n            <WorkSearchForm />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/profile\">\n            <ProfileForm />\n          </PrivateRoute>\n\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message used by components that fetch API data. */\n\nfunction LoadingSpinner() {\n  return (\n      <div className=\"LoadingSpinner\">\n        Loading ...\n      </div>\n  );\n}\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./common/LoadingSpinner\";\nimport BookFriendApi from \"./api/api\";\nimport UserContext from \"./auth/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"bookfriend-token\";\n\n/** BookFriend application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          BookFriendApi.token = token;\n          let currentUser = await BookFriendApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles site-wide signup.\n   *\n   * Automatically logs them in (set token) upon signup.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function signup(signupData) {\n    try {\n      let token = await BookFriendApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await BookFriendApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}